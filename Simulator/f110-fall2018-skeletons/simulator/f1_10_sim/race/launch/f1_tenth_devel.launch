<?xml version="1.0"?>
<launch>
  <!--This world name that is spawned in gazebo-->
  <!-- <arg name="world_name" value="track_barca"/> -->
  <arg name="world_name" value="track_porto"/>
  <!-- <arg name="world_name" value="lab_track2"/> -->
  <!--<arg name="world_name" value="track_levine"/>-->
  
  <!-- <arg name="world_name" value="lab_track2"/> -->
  <arg name="gui" default="true" />
  <arg name="run_camera" default="false"/>

  <!--flag to enable/disable keyboard-->
  <arg name="enable_keyboard" default="false"/>



  <!--launch the world-->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find racecar_gazebo)/worlds/$(arg world_name).world"/>
    <arg name="gui" value="$(arg gui)"/>
  </include>


  <group ns="racecar">
  <!--tf prefix for rviz-->
  <param name="tf_prefix" value="racecar" />
  <!--spawn the car using the single car launch file-->
  <include file="$(find racecar_gazebo)/launch/single_car.launch">
        <arg name="init_pose" value="-x 0.0 -y 0.0 -z 0.0" />
        <arg name="car_name" value="racecar" />
  </include>
  </group>

    <arg name="car_name1" value="racecar"/>
    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(find racecar_control)/config/racecar_control.yaml" command="load"/>

    <!-- load the controllers for this car -->
    <node name="controller_manager" pkg="controller_manager" type="spawner" respawn="false"
          output="screen" ns='$(arg car_name1)' args="left_rear_wheel_velocity_controller right_rear_wheel_velocity_controller
                                              left_front_wheel_velocity_controller right_front_wheel_velocity_controller
                                              left_steering_hinge_position_controller right_steering_hinge_position_controller
                                              joint_state_controller"/>

    <!--create the mux for this car-->
    <include file="$(find racecar)/launch/mux_gen.launch" ns="vesc">
      <arg name="vesc_name" value="vesc"/>
    </include>

    <arg name="vesc_remap1" value='vesc'/>

    <!--Load the vesc controller for this car-->
    <node pkg="racecar_control" type="servo_commands_gen.py" name="servo_commands_$(arg car_name1)" output="screen" args='$(arg car_name1)'>
      <remap from="/$(arg car_name1)/ackermann_cmd_mux/output" to="/$(arg vesc_remap1)/low_level/ackermann_cmd_mux/output"/>
    </node>

    <!-- Allow for Gazebo to broadcast odom -->
    <node pkg="racecar_gazebo" name="gazebo_odometry_node_$(arg car_name1)" type="gazebo_odometry_gen.py" args="$(arg car_name1)" output="screen"/>

    <!--Using the odom information broadcasted by Gazebo to create the rest of the tf tree required by gazebo-->
    <node name="message_to_tf_$(arg car_name1)" pkg="race" type="message_to_tf_gen.py" args='$(arg car_name1)'/>

    <!--The messages we pass get passed via drive parameters and sim connector converts them to Ackermann stamped messages so that the car moves-->

    <node pkg="race" name="sim_connector_node_$(arg car_name1)" type="sim_connector_gen.py" args="$(arg car_name1) $(arg vesc_remap1)" output="screen"/>  

<!--==========================================================================================================================-->

<!--test of running a keyboard_node
      Additionally you can run a node from the command line via rosrun race keyboard_gen.py racecar2 with the appropriate
      car_name
  -->
  <node pkg="race" name="keyboard_node_$(arg car_name1)" if="$(arg enable_keyboard)" type="keyboard_gen.py" output="screen" args="$(arg car_name1)"/>
  
  
  </launch>
